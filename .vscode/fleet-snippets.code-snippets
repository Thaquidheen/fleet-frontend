{
  "Fleet React Component": {
    "prefix": "frc",
    "body": [
      "import React from 'react';",
      "",
      "export interface ${1:ComponentName}Props {",
      "  ${2:// props}",
      "}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  ${3:// destructured props}",
      "}) => {",
      "  return (",
      "    <div className=\"fleet-${1/(.*)/${1:/downcase}/}\">${4:// component content}</div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Create a Fleet React Component"
  },
  "Fleet API Service": {
    "prefix": "fas",
    "body": [
      "import { ApiClient, ApiResponse } from '@fleet/api-client';",
      "import { ${1:EntityType} } from '@fleet/shared-types';",
      "",
      "export class ${2:EntityType}Service {",
      "  constructor(private apiClient: ApiClient) {}",
      "",
      "  async get${2:EntityType}s(): Promise<${1:EntityType}[]> {",
      "    const response = await this.apiClient.get<${1:EntityType}[]>('/${3:endpoint}');",
      "    return response.data;",
      "  }",
      "",
      "  async get${2:EntityType}ById(id: string): Promise<${1:EntityType}> {",
      "    const response = await this.apiClient.get<${1:EntityType}>(`/${3:endpoint}/\\${id}`);",
      "    return response.data;",
      "  }",
      "",
      "  async create${2:EntityType}(data: Partial<${1:EntityType}>): Promise<${1:EntityType}> {",
      "    const response = await this.apiClient.post<${1:EntityType}>('/${3:endpoint}', data);",
      "    return response.data;",
      "  }",
      "",
      "  async update${2:EntityType}(id: string, data: Partial<${1:EntityType}>): Promise<${1:EntityType}> {",
      "    const response = await this.apiClient.put<${1:EntityType}>(`/${3:endpoint}/\\${id}`, data);",
      "    return response.data;",
      "  }",
      "",
      "  async delete${2:EntityType}(id: string): Promise<void> {",
      "    await this.apiClient.delete(`/${3:endpoint}/\\${id}`);",
      "  }",
      "}"
    ],
    "description": "Create a Fleet API Service"
  },
  "Fleet Redux Slice": {
    "prefix": "frs",
    "body": [
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "import { ${1:EntityType} } from '@fleet/shared-types';",
      "",
      "interface ${2:SliceName}State {",
      "  ${3:entities}: ${1:EntityType}[];",
      "  loading: boolean;",
      "  error: string | null;",
      "}",
      "",
      "const initialState: ${2:SliceName}State = {",
      "  ${3:entities}: [],",
      "  loading: false,",
      "  error: null,",
      "};",
      "",
      "const ${4:sliceName}Slice = createSlice({",
      "  name: '${4:sliceName}',",
      "  initialState,",
      "  reducers: {",
      "    set${2:SliceName}Loading: (state, action: PayloadAction<boolean>) => {",
      "      state.loading = action.payload;",
      "    },",
      "    set${2:SliceName}Error: (state, action: PayloadAction<string | null>) => {",
      "      state.error = action.payload;",
      "    },",
      "    set${2:SliceName}: (state, action: PayloadAction<${1:EntityType}[]>) => {",
      "      state.${3:entities} = action.payload;",
      "    },",
      "    add${1:EntityType}: (state, action: PayloadAction<${1:EntityType}>) => {",
      "      state.${3:entities}.push(action.payload);",
      "    },",
      "    update${1:EntityType}: (state, action: PayloadAction<${1:EntityType}>) => {",
      "      const index = state.${3:entities}.findIndex(item => item.id === action.payload.id);",
      "      if (index !== -1) {",
      "        state.${3:entities}[index] = action.payload;",
      "      }",
      "    },",
      "    remove${1:EntityType}: (state, action: PayloadAction<string>) => {",
      "      state.${3:entities} = state.${3:entities}.filter(item => item.id !== action.payload);",
      "    },",
      "  },",
      "});",
      "",
      "export const {",
      "  set${2:SliceName}Loading,",
      "  set${2:SliceName}Error,",
      "  set${2:SliceName},",
      "  add${1:EntityType},",
      "  update${1:EntityType},",
      "  remove${1:EntityType},",
      "} = ${4:sliceName}Slice.actions;",
      "",
      "export default ${4:sliceName}Slice.reducer;"
    ],
    "description": "Create a Fleet Redux Slice"
  },
  "Fleet Custom Hook": {
    "prefix": "fch",
    "body": [
      "import { useState, useEffect } from 'react';",
      "import { ${1:EntityType} } from '@fleet/shared-types';",
      "import { apiClient } from '@fleet/api-client';",
      "",
      "export const use${2:HookName} = () => {",
      "  const [${3:data}, set${3/(.*)/${1:/capitalize}/}] = useState<${1:EntityType}[]>([]);",
      "  const [loading, setLoading] = useState(false);",
      "  const [error, setError] = useState<string | null>(null);",
      "",
      "  const fetch${3/(.*)/${1:/capitalize}/} = async () => {",
      "    try {",
      "      setLoading(true);",
      "      setError(null);",
      "      const result = await apiClient.${4:serviceName}.get${2:HookName}();",
      "      set${3/(.*)/${1:/capitalize}/}(result);",
      "    } catch (err) {",
      "      setError(err instanceof Error ? err.message : 'An error occurred');",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  useEffect(() => {",
      "    fetch${3/(.*)/${1:/capitalize}/}();",
      "  }, []);",
      "",
      "  return {",
      "    ${3:data},",
      "    loading,",
      "    error,",
      "    refetch: fetch${3/(.*)/${1:/capitalize}/},",
      "  };",
      "};"
    ],
    "description": "Create a Fleet Custom Hook"
  }
}
